syntax = "proto3";
package sports;

option go_package = "/sports";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";


service Sports {
  // ListEvents returns a list of all events.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = { post: "/v1/list-events", body: "*" };
  }
  // GetEvent returns a single event.
  rpc GetEvent(GetEventRequest) returns (Event) {
    option (google.api.http) = { get: "/v1/event/{id}" };
  }
  // UpdateScore updates the score of an event and returns the event.
  rpc UpdateScore(UpdateScoreRequest) returns (Event) {
    option (google.api.http) = { patch: "/v1/event/{id}/update-score", body: "*" };
  }
}

/* Requests/Responses */

// Request for ListEvents call.
message ListEventsRequest {
  ListEventsRequestFilter filter = 1;
}

// Request for GetEvent call.
message GetEventRequest {
  // ID represents the unique identifier of the event.
  int64 id = 1;
}

// Request for UpdateScore call.
message UpdateScoreRequest {
  // ID represents the unique identifier of the event.
  int64 id = 1;
  // HomeScore represents the home team's score.
  int32 home_score = 2;
  // AwayScore represents the away team's score.
  int32 away_score = 3;
  // Finalised represents whether the score is to be finalised.
  bool finalised = 4;
}

// Response to ListEvents call.
message ListEventsResponse {
  repeated Event events = 1;
}

// Filter for listing events.
message ListEventsRequestFilter {
}

// Status of an event.
enum Status {
  OPEN = 0;
  CLOSED = 1;
}

/* Resources */

// An event resource.
message Event {
  // ID represents unique identifier for the event.
  int64 id = 1;
  // Name represents the name of the sport.
  string name = 2;
  // Competition represents the competition name.
  string competition = 3;
  // HomeTeam represents the name of the home team.
  string homeTeam = 4;
  // Away_team represents the name of the away team.
  string away_team = 5;
  // Home Score represents the home team's score.
  int32 home_score = 6;
  // Away Score represents the away team's score.
  int32 away_score = 7;
  // AdvertisedStartTime represents the time the event is advertised to start.
  google.protobuf.Timestamp advertised_start_time = 8;
  // ScoreFinalised represents whether the score has been finalised (i.e. the final score has been input and the event is now over)
  bool score_finalised = 9;
  // Status is a derived enum field that represents whether the advertised_start_time has been exceeded.
  Status status = 10;
}
